{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\inspi\\\\OneDrive\\\\Desktop\\\\lms\\\\my-lms-frontend\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport toast from 'react-hot-toast';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // Check if user is logged in (e.g., check localStorage or session)\n    const storedUser = localStorage.getItem('user');\n    if (storedUser) {\n      setUser(JSON.parse(storedUser));\n      setIsAuthenticated(true);\n    }\n    setLoading(false);\n  }, []);\n  const login = async (email, password) => {\n    try {\n      // Get existing users from localStorage or initialize empty array\n      const existingUsers = JSON.parse(localStorage.getItem('users') || '[]');\n\n      // Check if user exists\n      let user = existingUsers.find(u => u.email === email);\n      if (!user) {\n        // Create new user if doesn't exist\n        user = {\n          id: Date.now(),\n          email,\n          name: email.split('@')[0],\n          // Use part of email as name\n          role: 'student' // Default role for new users\n        };\n        existingUsers.push(user);\n        localStorage.setItem('users', JSON.stringify(existingUsers));\n      }\n      setUser(user);\n      setIsAuthenticated(true);\n      localStorage.setItem('user', JSON.stringify(user));\n      toast.success('Login successful!');\n      return user;\n    } catch (error) {\n      toast.error(error.message || 'Login failed');\n      throw error;\n    }\n  };\n  const register = async (name, email, password) => {\n    try {\n      // In a real app, this would be an API call\n      // Mock registration for demonstration\n      const newUser = {\n        id: Date.now(),\n        name,\n        email,\n        role: 'student' // Default role for new registrations\n      };\n      setUser(newUser);\n      setIsAuthenticated(true);\n      localStorage.setItem('user', JSON.stringify(newUser));\n      toast.success('Registration successful!');\n      return newUser;\n    } catch (error) {\n      toast.error(error.message || 'Registration failed');\n      throw error;\n    }\n  };\n  const logout = () => {\n    setUser(null);\n    setIsAuthenticated(false);\n    localStorage.removeItem('user');\n    toast.success('Logged out successfully');\n  };\n  const value = {\n    user,\n    isAuthenticated,\n    loading,\n    login,\n    register,\n    logout\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 10\n  }, this);\n};\n_s2(AuthProvider, \"MIOyihIJe1jbesOAPrjh1+/HIzc=\");\n_c = AuthProvider;\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","toast","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","isAuthenticated","setIsAuthenticated","loading","setLoading","storedUser","localStorage","getItem","JSON","parse","login","email","password","existingUsers","find","u","id","Date","now","name","split","role","push","setItem","stringify","success","error","message","register","newUser","logout","removeItem","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/inspi/OneDrive/Desktop/lms/my-lms-frontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport toast from 'react-hot-toast';\r\n\r\nconst AuthContext = createContext(null);\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // Check if user is logged in (e.g., check localStorage or session)\r\n    const storedUser = localStorage.getItem('user');\r\n    if (storedUser) {\r\n      setUser(JSON.parse(storedUser));\r\n      setIsAuthenticated(true);\r\n    }\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  const login = async (email, password) => {\r\n    try {\r\n      // Get existing users from localStorage or initialize empty array\r\n      const existingUsers = JSON.parse(localStorage.getItem('users') || '[]');\r\n      \r\n      // Check if user exists\r\n      let user = existingUsers.find(u => u.email === email);\r\n      \r\n      if (!user) {\r\n        // Create new user if doesn't exist\r\n        user = {\r\n          id: Date.now(),\r\n          email,\r\n          name: email.split('@')[0], // Use part of email as name\r\n          role: 'student', // Default role for new users\r\n        };\r\n        existingUsers.push(user);\r\n        localStorage.setItem('users', JSON.stringify(existingUsers));\r\n      }\r\n\r\n      setUser(user);\r\n      setIsAuthenticated(true);\r\n      localStorage.setItem('user', JSON.stringify(user));\r\n      toast.success('Login successful!');\r\n      return user;\r\n    } catch (error) {\r\n      toast.error(error.message || 'Login failed');\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const register = async (name, email, password) => {\r\n    try {\r\n      // In a real app, this would be an API call\r\n      // Mock registration for demonstration\r\n      const newUser = {\r\n        id: Date.now(),\r\n        name,\r\n        email,\r\n        role: 'student', // Default role for new registrations\r\n      };\r\n\r\n      setUser(newUser);\r\n      setIsAuthenticated(true);\r\n      localStorage.setItem('user', JSON.stringify(newUser));\r\n      toast.success('Registration successful!');\r\n      return newUser;\r\n    } catch (error) {\r\n      toast.error(error.message || 'Registration failed');\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    setUser(null);\r\n    setIsAuthenticated(false);\r\n    localStorage.removeItem('user');\r\n    toast.success('Logged out successfully');\r\n  };\r\n\r\n  const value = {\r\n    user,\r\n    isAuthenticated,\r\n    loading,\r\n    login,\r\n    register,\r\n    logout,\r\n  };\r\n\r\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\r\n};\r\n\r\nexport default AuthContext; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}