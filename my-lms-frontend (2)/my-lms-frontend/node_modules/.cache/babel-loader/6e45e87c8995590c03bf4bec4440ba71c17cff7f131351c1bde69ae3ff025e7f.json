{"ast":null,"code":"import _objectSpread from\"E:/lms-assesment-frontend/my-lms-frontend (2)/my-lms-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{createContext,useContext,useState,useEffect}from'react';import toast from'react-hot-toast';import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext(null);export const useAuth=()=>{const context=useContext(AuthContext);if(!context){throw new Error('useAuth must be used within an AuthProvider');}return context;};export const AuthProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(null);const[isAuthenticated,setIsAuthenticated]=useState(false);const[loading,setLoading]=useState(true);useEffect(()=>{// Check if user is logged in (e.g., check localStorage or session)\nconst storedUser=localStorage.getItem('user');if(storedUser){setUser(JSON.parse(storedUser));setIsAuthenticated(true);}setLoading(false);},[]);const login=async(email,password)=>{try{// Predefined mock users for specific roles\nconst mockUsers=[{id:1,email:'student@example.com',password:'password123',name:'John Student',role:'student'},{id:2,email:'admin@example.com',password:'password123',name:'Admin User',role:'admin'}];// Check if the entered credentials match a mock user\nlet user=mockUsers.find(u=>u.email===email&&u.password===password);// If not a mock user, check if email exists in localStorage (for previously created students)\nif(!user){const existingUsers=JSON.parse(localStorage.getItem('users')||'[]');user=existingUsers.find(u=>u.email===email);// If email doesn't exist, create a new student user\nif(!user){user={id:Date.now(),email,name:email.split('@')[0],// Use part of email as name\nrole:'student'// Default role for new users\n};existingUsers.push(user);localStorage.setItem('users',JSON.stringify(existingUsers));}}// If user is found (either mock or existing/new student)\nif(user){// For mock users, remove password before storing\nconst userToStore=user.password?_objectSpread(_objectSpread({},user),{},{password:undefined}):user;setUser(userToStore);setIsAuthenticated(true);localStorage.setItem('user',JSON.stringify(userToStore));toast.success('Login successful!');return userToStore;}else{// This case should ideally not be reached with the new user creation logic,\n// but kept as a fallback for clarity.\nthrow new Error('Invalid credentials');}}catch(error){toast.error(error.message||'Login failed');throw error;}};const register=async(name,email,password)=>{try{// In a real app, this would be an API call\n// Mock registration for demonstration\nconst newUser={id:Date.now(),name,email,role:'student'// Default role for new registrations\n};setUser(newUser);setIsAuthenticated(true);localStorage.setItem('user',JSON.stringify(newUser));toast.success('Registration successful!');return newUser;}catch(error){toast.error(error.message||'Registration failed');throw error;}};const updateUser=updatedUser=>{setUser(updatedUser);localStorage.setItem('user',JSON.stringify(updatedUser));toast.success('Profile updated successfully!');};const logout=()=>{setUser(null);setIsAuthenticated(false);localStorage.removeItem('user');toast.success('Logged out successfully');};const value={user,isAuthenticated,loading,login,register,logout,updateUser};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:children});};export default AuthContext;","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","toast","jsx","_jsx","AuthContext","useAuth","context","Error","AuthProvider","_ref","children","user","setUser","isAuthenticated","setIsAuthenticated","loading","setLoading","storedUser","localStorage","getItem","JSON","parse","login","email","password","mockUsers","id","name","role","find","u","existingUsers","Date","now","split","push","setItem","stringify","userToStore","_objectSpread","undefined","success","error","message","register","newUser","updateUser","updatedUser","logout","removeItem","value","Provider"],"sources":["E:/lms-assesment-frontend/my-lms-frontend (2)/my-lms-frontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport toast from 'react-hot-toast';\r\n\r\nconst AuthContext = createContext(null);\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // Check if user is logged in (e.g., check localStorage or session)\r\n    const storedUser = localStorage.getItem('user');\r\n    if (storedUser) {\r\n      setUser(JSON.parse(storedUser));\r\n      setIsAuthenticated(true);\r\n    }\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  const login = async (email, password) => {\r\n    try {\r\n      // Predefined mock users for specific roles\r\n      const mockUsers = [\r\n        {\r\n          id: 1,\r\n          email: 'student@example.com',\r\n          password: 'password123',\r\n          name: 'John Student',\r\n          role: 'student',\r\n        },\r\n        {\r\n          id: 2,\r\n          email: 'admin@example.com',\r\n          password: 'password123',\r\n          name: 'Admin User',\r\n          role: 'admin',\r\n        },\r\n      ];\r\n\r\n      // Check if the entered credentials match a mock user\r\n      let user = mockUsers.find(\r\n        (u) => u.email === email && u.password === password\r\n      );\r\n\r\n      // If not a mock user, check if email exists in localStorage (for previously created students)\r\n      if (!user) {\r\n        const existingUsers = JSON.parse(localStorage.getItem('users') || '[]');\r\n        user = existingUsers.find(u => u.email === email);\r\n\r\n        // If email doesn't exist, create a new student user\r\n        if (!user) {\r\n          user = {\r\n            id: Date.now(),\r\n            email,\r\n            name: email.split('@')[0], // Use part of email as name\r\n            role: 'student', // Default role for new users\r\n          };\r\n          existingUsers.push(user);\r\n          localStorage.setItem('users', JSON.stringify(existingUsers));\r\n        }\r\n      }\r\n\r\n      // If user is found (either mock or existing/new student)\r\n      if (user) {\r\n        // For mock users, remove password before storing\r\n        const userToStore = user.password ? { ...user, password: undefined } : user;\r\n        setUser(userToStore);\r\n        setIsAuthenticated(true);\r\n        localStorage.setItem('user', JSON.stringify(userToStore));\r\n        toast.success('Login successful!');\r\n        return userToStore;\r\n      } else {\r\n        // This case should ideally not be reached with the new user creation logic,\r\n        // but kept as a fallback for clarity.\r\n         throw new Error('Invalid credentials');\r\n      }\r\n\r\n    } catch (error) {\r\n      toast.error(error.message || 'Login failed');\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const register = async (name, email, password) => {\r\n    try {\r\n      // In a real app, this would be an API call\r\n      // Mock registration for demonstration\r\n      const newUser = {\r\n        id: Date.now(),\r\n        name,\r\n        email,\r\n        role: 'student', // Default role for new registrations\r\n      };\r\n\r\n      setUser(newUser);\r\n      setIsAuthenticated(true);\r\n      localStorage.setItem('user', JSON.stringify(newUser));\r\n      toast.success('Registration successful!');\r\n      return newUser;\r\n    } catch (error) {\r\n      toast.error(error.message || 'Registration failed');\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const updateUser = (updatedUser) => {\r\n    setUser(updatedUser);\r\n    localStorage.setItem('user', JSON.stringify(updatedUser));\r\n    toast.success('Profile updated successfully!');\r\n  };\r\n\r\n  const logout = () => {\r\n    setUser(null);\r\n    setIsAuthenticated(false);\r\n    localStorage.removeItem('user');\r\n    toast.success('Logged out successfully');\r\n  };\r\n\r\n  const value = {\r\n    user,\r\n    isAuthenticated,\r\n    loading,\r\n    login,\r\n    register,\r\n    logout,\r\n    updateUser,\r\n  };\r\n\r\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\r\n};\r\n\r\nexport default AuthContext; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}