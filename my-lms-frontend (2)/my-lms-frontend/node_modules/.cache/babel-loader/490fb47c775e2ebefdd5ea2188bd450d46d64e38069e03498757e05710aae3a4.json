{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\inspi\\\\OneDrive\\\\Desktop\\\\lms\\\\my-lms-frontend\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport toast from 'react-hot-toast';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // Check if user is logged in (e.g., check localStorage or session)\n    const storedUser = localStorage.getItem('user');\n    if (storedUser) {\n      setUser(JSON.parse(storedUser));\n      setIsAuthenticated(true);\n    }\n    setLoading(false);\n  }, []);\n  const login = async (email, password) => {\n    try {\n      // Predefined mock users for specific roles\n      const mockUsers = [{\n        id: 1,\n        email: 'student@example.com',\n        password: 'password123',\n        name: 'John Student',\n        role: 'student'\n      }, {\n        id: 2,\n        email: 'admin@example.com',\n        password: 'password123',\n        name: 'Admin User',\n        role: 'admin'\n      }];\n\n      // Check if the entered credentials match a mock user\n      let user = mockUsers.find(u => u.email === email && u.password === password);\n\n      // If not a mock user, check if email exists in localStorage (for previously created students)\n      if (!user) {\n        const existingUsers = JSON.parse(localStorage.getItem('users') || '[]');\n        user = existingUsers.find(u => u.email === email);\n\n        // If email doesn't exist, create a new student user\n        if (!user) {\n          user = {\n            id: Date.now(),\n            email,\n            name: email.split('@')[0],\n            // Use part of email as name\n            role: 'student' // Default role for new users\n          };\n          existingUsers.push(user);\n          localStorage.setItem('users', JSON.stringify(existingUsers));\n        }\n      }\n\n      // If user is found (either mock or existing/new student)\n      if (user) {\n        // For mock users, remove password before storing\n        const userToStore = user.password ? {\n          ...user,\n          password: undefined\n        } : user;\n        setUser(userToStore);\n        setIsAuthenticated(true);\n        localStorage.setItem('user', JSON.stringify(userToStore));\n        toast.success('Login successful!');\n        return userToStore;\n      } else {\n        // This case should ideally not be reached with the new user creation logic,\n        // but kept as a fallback for clarity.\n        throw new Error('Invalid credentials');\n      }\n    } catch (error) {\n      toast.error(error.message || 'Login failed');\n      throw error;\n    }\n  };\n  const register = async (name, email, password) => {\n    try {\n      // In a real app, this would be an API call\n      // Mock registration for demonstration\n      const newUser = {\n        id: Date.now(),\n        name,\n        email,\n        role: 'student' // Default role for new registrations\n      };\n      setUser(newUser);\n      setIsAuthenticated(true);\n      localStorage.setItem('user', JSON.stringify(newUser));\n      toast.success('Registration successful!');\n      return newUser;\n    } catch (error) {\n      toast.error(error.message || 'Registration failed');\n      throw error;\n    }\n  };\n  const logout = () => {\n    setUser(null);\n    setIsAuthenticated(false);\n    localStorage.removeItem('user');\n    toast.success('Logged out successfully');\n  };\n  const value = {\n    user,\n    isAuthenticated,\n    loading,\n    login,\n    register,\n    logout\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 131,\n    columnNumber: 10\n  }, this);\n};\n_s2(AuthProvider, \"MIOyihIJe1jbesOAPrjh1+/HIzc=\");\n_c = AuthProvider;\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","toast","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","isAuthenticated","setIsAuthenticated","loading","setLoading","storedUser","localStorage","getItem","JSON","parse","login","email","password","mockUsers","id","name","role","find","u","existingUsers","Date","now","split","push","setItem","stringify","userToStore","undefined","success","error","message","register","newUser","logout","removeItem","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/inspi/OneDrive/Desktop/lms/my-lms-frontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport toast from 'react-hot-toast';\r\n\r\nconst AuthContext = createContext(null);\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // Check if user is logged in (e.g., check localStorage or session)\r\n    const storedUser = localStorage.getItem('user');\r\n    if (storedUser) {\r\n      setUser(JSON.parse(storedUser));\r\n      setIsAuthenticated(true);\r\n    }\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  const login = async (email, password) => {\r\n    try {\r\n      // Predefined mock users for specific roles\r\n      const mockUsers = [\r\n        {\r\n          id: 1,\r\n          email: 'student@example.com',\r\n          password: 'password123',\r\n          name: 'John Student',\r\n          role: 'student',\r\n        },\r\n        {\r\n          id: 2,\r\n          email: 'admin@example.com',\r\n          password: 'password123',\r\n          name: 'Admin User',\r\n          role: 'admin',\r\n        },\r\n      ];\r\n\r\n      // Check if the entered credentials match a mock user\r\n      let user = mockUsers.find(\r\n        (u) => u.email === email && u.password === password\r\n      );\r\n\r\n      // If not a mock user, check if email exists in localStorage (for previously created students)\r\n      if (!user) {\r\n        const existingUsers = JSON.parse(localStorage.getItem('users') || '[]');\r\n        user = existingUsers.find(u => u.email === email);\r\n\r\n        // If email doesn't exist, create a new student user\r\n        if (!user) {\r\n          user = {\r\n            id: Date.now(),\r\n            email,\r\n            name: email.split('@')[0], // Use part of email as name\r\n            role: 'student', // Default role for new users\r\n          };\r\n          existingUsers.push(user);\r\n          localStorage.setItem('users', JSON.stringify(existingUsers));\r\n        }\r\n      }\r\n\r\n      // If user is found (either mock or existing/new student)\r\n      if (user) {\r\n        // For mock users, remove password before storing\r\n        const userToStore = user.password ? { ...user, password: undefined } : user;\r\n        setUser(userToStore);\r\n        setIsAuthenticated(true);\r\n        localStorage.setItem('user', JSON.stringify(userToStore));\r\n        toast.success('Login successful!');\r\n        return userToStore;\r\n      } else {\r\n        // This case should ideally not be reached with the new user creation logic,\r\n        // but kept as a fallback for clarity.\r\n         throw new Error('Invalid credentials');\r\n      }\r\n\r\n    } catch (error) {\r\n      toast.error(error.message || 'Login failed');\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const register = async (name, email, password) => {\r\n    try {\r\n      // In a real app, this would be an API call\r\n      // Mock registration for demonstration\r\n      const newUser = {\r\n        id: Date.now(),\r\n        name,\r\n        email,\r\n        role: 'student', // Default role for new registrations\r\n      };\r\n\r\n      setUser(newUser);\r\n      setIsAuthenticated(true);\r\n      localStorage.setItem('user', JSON.stringify(newUser));\r\n      toast.success('Registration successful!');\r\n      return newUser;\r\n    } catch (error) {\r\n      toast.error(error.message || 'Registration failed');\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    setUser(null);\r\n    setIsAuthenticated(false);\r\n    localStorage.removeItem('user');\r\n    toast.success('Logged out successfully');\r\n  };\r\n\r\n  const value = {\r\n    user,\r\n    isAuthenticated,\r\n    loading,\r\n    login,\r\n    register,\r\n    logout,\r\n  };\r\n\r\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\r\n};\r\n\r\nexport default AuthContext; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}